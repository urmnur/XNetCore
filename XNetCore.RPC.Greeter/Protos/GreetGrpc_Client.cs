// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protos/greet.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace XNetCore.RPC.Greeter
{
    /// <summary>
    /// 服务端定义
    /// </summary>
    public static partial class RpcServiceGreeter_Client
    {
        static readonly string __ServiceName = "greet.RpcServiceGreeter";

        static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
        {
#if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
            if (message is global::Google.Protobuf.IBufferMessage)
            {
                context.SetPayloadLength(message.CalculateSize());
                global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
                context.Complete();
                return;
            }
#endif
            context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
        }

        static class __Helper_MessageCache<T>
        {
            public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
        }

        static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
        {
#if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
            if (__Helper_MessageCache<T>.IsBufferMessage)
            {
                return parser.ParseFrom(context.PayloadAsReadOnlySequence());
            }
#endif
            return parser.ParseFrom(context.PayloadAsNewBuffer());
        }

        static readonly grpc::Marshaller<global::XNetCore.RPC.Greeter.RpcRequest> __Marshaller_greet_RpcRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::XNetCore.RPC.Greeter.RpcRequest.Parser));
        static readonly grpc::Marshaller<global::XNetCore.RPC.Greeter.RpcResponse> __Marshaller_greet_RpcResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::XNetCore.RPC.Greeter.RpcResponse.Parser));

        static readonly grpc::Method<global::XNetCore.RPC.Greeter.RpcRequest, global::XNetCore.RPC.Greeter.RpcResponse> __Method_RpcService = new grpc::Method<global::XNetCore.RPC.Greeter.RpcRequest, global::XNetCore.RPC.Greeter.RpcResponse>(
            grpc::MethodType.Unary,
            __ServiceName,
            "RpcService",
            __Marshaller_greet_RpcRequest,
            __Marshaller_greet_RpcResponse);

        static readonly grpc::Method<global::XNetCore.RPC.Greeter.RpcRequest, global::XNetCore.RPC.Greeter.RpcResponse> __Method_RpcStream = new grpc::Method<global::XNetCore.RPC.Greeter.RpcRequest, global::XNetCore.RPC.Greeter.RpcResponse>(
            grpc::MethodType.ServerStreaming,
            __ServiceName,
            "RpcStream",
            __Marshaller_greet_RpcRequest,
            __Marshaller_greet_RpcResponse);

        /// <summary>Service descriptor</summary>
        public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
        {
            get { return global::XNetCore.RPC.Greeter.GreetReflection.Descriptor.Services[0]; }
        }

        /// <summary>Client for RpcServiceGreeter</summary>
        public partial class RpcServiceGreeterClient : grpc::ClientBase<RpcServiceGreeterClient>
        {
            /// <summary>Creates a new client for RpcServiceGreeter</summary>
            /// <param name="channel">The channel to use to make remote calls.</param>
            public RpcServiceGreeterClient(grpc::ChannelBase channel) : base(channel)
            {
            }
            /// <summary>Creates a new client for RpcServiceGreeter that uses a custom <c>CallInvoker</c>.</summary>
            /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
            public RpcServiceGreeterClient(grpc::CallInvoker callInvoker) : base(callInvoker)
            {
            }
            /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
            protected RpcServiceGreeterClient() : base()
            {
            }
            /// <summary>Protected constructor to allow creation of configured clients.</summary>
            /// <param name="configuration">The client configuration.</param>
            protected RpcServiceGreeterClient(ClientBaseConfiguration configuration) : base(configuration)
            {
            }

            /// <summary>
            /// 服务端返馈信息方法
            /// </summary>
            /// <param name="request">The request to send to the server.</param>
            /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            /// <param name="cancellationToken">An optional token for canceling the call.</param>
            /// <returns>The response received from the server.</returns>
            public virtual global::XNetCore.RPC.Greeter.RpcResponse RpcService(global::XNetCore.RPC.Greeter.RpcRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
            {
                return RpcService(request, new grpc::CallOptions(headers, deadline, cancellationToken));
            }
            /// <summary>
            /// 服务端返馈信息方法
            /// </summary>
            /// <param name="request">The request to send to the server.</param>
            /// <param name="options">The options for the call.</param>
            /// <returns>The response received from the server.</returns>
            public virtual global::XNetCore.RPC.Greeter.RpcResponse RpcService(global::XNetCore.RPC.Greeter.RpcRequest request, grpc::CallOptions options)
            {
                return CallInvoker.BlockingUnaryCall(__Method_RpcService, null, options, request);
            }
            /// <summary>
            /// 服务端返馈信息方法
            /// </summary>
            /// <param name="request">The request to send to the server.</param>
            /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            /// <param name="cancellationToken">An optional token for canceling the call.</param>
            /// <returns>The call object.</returns>
            public virtual grpc::AsyncUnaryCall<global::XNetCore.RPC.Greeter.RpcResponse> RpcServiceAsync(global::XNetCore.RPC.Greeter.RpcRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
            {
                return RpcServiceAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
            }
            /// <summary>
            /// 服务端返馈信息方法
            /// </summary>
            /// <param name="request">The request to send to the server.</param>
            /// <param name="options">The options for the call.</param>
            /// <returns>The call object.</returns>
            public virtual grpc::AsyncUnaryCall<global::XNetCore.RPC.Greeter.RpcResponse> RpcServiceAsync(global::XNetCore.RPC.Greeter.RpcRequest request, grpc::CallOptions options)
            {
                return CallInvoker.AsyncUnaryCall(__Method_RpcService, null, options, request);
            }
            public virtual grpc::AsyncServerStreamingCall<global::XNetCore.RPC.Greeter.RpcResponse> RpcStream(global::XNetCore.RPC.Greeter.RpcRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
            {
                return RpcStream(request, new grpc::CallOptions(headers, deadline, cancellationToken));
            }
            public virtual grpc::AsyncServerStreamingCall<global::XNetCore.RPC.Greeter.RpcResponse> RpcStream(global::XNetCore.RPC.Greeter.RpcRequest request, grpc::CallOptions options)
            {
                return CallInvoker.AsyncServerStreamingCall(__Method_RpcStream, null, options, request);
            }
            /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
            protected override RpcServiceGreeterClient NewInstance(ClientBaseConfiguration configuration)
            {
                return new RpcServiceGreeterClient(configuration);
            }
        }

    }
}
#endregion

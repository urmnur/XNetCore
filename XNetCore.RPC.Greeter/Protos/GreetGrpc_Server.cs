// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protos/greet.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace XNetCore.RPC.Greeter
{
    /// <summary>
    /// 服务端定义
    /// </summary>
    public static partial class RpcServiceGreeter_Server
    {
        static readonly string __ServiceName = "greet.RpcServiceGreeter";

        static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
        {
#if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
            if (message is global::Google.Protobuf.IBufferMessage)
            {
                context.SetPayloadLength(message.CalculateSize());
                global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
                context.Complete();
                return;
            }
#endif
            context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
        }

        static class __Helper_MessageCache<T>
        {
            public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
        }

        static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
        {
#if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
            if (__Helper_MessageCache<T>.IsBufferMessage)
            {
                return parser.ParseFrom(context.PayloadAsReadOnlySequence());
            }
#endif
            return parser.ParseFrom(context.PayloadAsNewBuffer());
        }

        static readonly grpc::Marshaller<global::XNetCore.RPC.Greeter.RpcRequest> __Marshaller_greet_RpcRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::XNetCore.RPC.Greeter.RpcRequest.Parser));
        static readonly grpc::Marshaller<global::XNetCore.RPC.Greeter.RpcResponse> __Marshaller_greet_RpcResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::XNetCore.RPC.Greeter.RpcResponse.Parser));

        static readonly grpc::Method<global::XNetCore.RPC.Greeter.RpcRequest, global::XNetCore.RPC.Greeter.RpcResponse> __Method_RpcService = new grpc::Method<global::XNetCore.RPC.Greeter.RpcRequest, global::XNetCore.RPC.Greeter.RpcResponse>(
            grpc::MethodType.Unary,
            __ServiceName,
            "RpcService",
            __Marshaller_greet_RpcRequest,
            __Marshaller_greet_RpcResponse);

        static readonly grpc::Method<global::XNetCore.RPC.Greeter.RpcRequest, global::XNetCore.RPC.Greeter.RpcResponse> __Method_RpcStream = new grpc::Method<global::XNetCore.RPC.Greeter.RpcRequest, global::XNetCore.RPC.Greeter.RpcResponse>(
            grpc::MethodType.ServerStreaming,
            __ServiceName,
            "RpcStream",
            __Marshaller_greet_RpcRequest,
            __Marshaller_greet_RpcResponse);

        /// <summary>Service descriptor</summary>
        public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
        {
            get { return global::XNetCore.RPC.Greeter.GreetReflection.Descriptor.Services[0]; }
        }

        /// <summary>Base class for server-side implementations of RpcServiceGreeter</summary>
        [grpc::BindServiceMethod(typeof(RpcServiceGreeter_Server), "BindService")]
        public abstract partial class RpcServiceGreeterBase
        {
            /// <summary>
            /// 服务端返馈信息方法
            /// </summary>
            /// <param name="request">The request received from the client.</param>
            /// <param name="context">The context of the server-side call handler being invoked.</param>
            /// <returns>The response to send back to the client (wrapped by a task).</returns>
            public virtual global::System.Threading.Tasks.Task<global::XNetCore.RPC.Greeter.RpcResponse> RpcService(global::XNetCore.RPC.Greeter.RpcRequest request, grpc::ServerCallContext context)
            {
                throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
            }

            public virtual global::System.Threading.Tasks.Task RpcStream(global::XNetCore.RPC.Greeter.RpcRequest request, grpc::IServerStreamWriter<global::XNetCore.RPC.Greeter.RpcResponse> responseStream, grpc::ServerCallContext context)
            {
                throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
            }

        }

        /// <summary>Creates service definition that can be registered with a server</summary>
        /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
        public static grpc::ServerServiceDefinition BindService(RpcServiceGreeterBase serviceImpl)
        {
            return grpc::ServerServiceDefinition.CreateBuilder()
                .AddMethod(__Method_RpcService, serviceImpl.RpcService)
                .AddMethod(__Method_RpcStream, serviceImpl.RpcStream).Build();
        }

        /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
        /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
        /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
        /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
        public static void BindService(grpc::ServiceBinderBase serviceBinder, RpcServiceGreeterBase serviceImpl)
        {
            serviceBinder.AddMethod(__Method_RpcService, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::XNetCore.RPC.Greeter.RpcRequest, global::XNetCore.RPC.Greeter.RpcResponse>(serviceImpl.RpcService));
            serviceBinder.AddMethod(__Method_RpcStream, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::XNetCore.RPC.Greeter.RpcRequest, global::XNetCore.RPC.Greeter.RpcResponse>(serviceImpl.RpcStream));
        }
    }
}
#endregion
